// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	types "sequencesender/internal/types"
)

// StorageInterface is an autogenerated mock type for the StorageInterface type
type StorageInterface struct {
	mock.Mock
}

type StorageInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageInterface) EXPECT() *StorageInterface_Expecter {
	return &StorageInterface_Expecter{mock: &_m.Mock}
}

// CreateSequence provides a mock function with given fields: ctx, tx, req
func (_m *StorageInterface) CreateSequence(ctx context.Context, tx *sql.Tx, req types.CreateSequenceRequest) (int, error) {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSequence")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, types.CreateSequenceRequest) (int, error)); ok {
		return rf(ctx, tx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, types.CreateSequenceRequest) int); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, types.CreateSequenceRequest) error); ok {
		r1 = rf(ctx, tx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageInterface_CreateSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSequence'
type StorageInterface_CreateSequence_Call struct {
	*mock.Call
}

// CreateSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - req types.CreateSequenceRequest
func (_e *StorageInterface_Expecter) CreateSequence(ctx interface{}, tx interface{}, req interface{}) *StorageInterface_CreateSequence_Call {
	return &StorageInterface_CreateSequence_Call{Call: _e.mock.On("CreateSequence", ctx, tx, req)}
}

func (_c *StorageInterface_CreateSequence_Call) Run(run func(ctx context.Context, tx *sql.Tx, req types.CreateSequenceRequest)) *StorageInterface_CreateSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(types.CreateSequenceRequest))
	})
	return _c
}

func (_c *StorageInterface_CreateSequence_Call) Return(_a0 int, _a1 error) *StorageInterface_CreateSequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageInterface_CreateSequence_Call) RunAndReturn(run func(context.Context, *sql.Tx, types.CreateSequenceRequest) (int, error)) *StorageInterface_CreateSequence_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSteps provides a mock function with given fields: ctx, tx, sequenceID, steps
func (_m *StorageInterface) CreateSteps(ctx context.Context, tx *sql.Tx, sequenceID int, steps []types.CreateStepRequest) error {
	ret := _m.Called(ctx, tx, sequenceID, steps)

	if len(ret) == 0 {
		panic("no return value specified for CreateSteps")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, []types.CreateStepRequest) error); ok {
		r0 = rf(ctx, tx, sequenceID, steps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageInterface_CreateSteps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSteps'
type StorageInterface_CreateSteps_Call struct {
	*mock.Call
}

// CreateSteps is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - sequenceID int
//   - steps []types.CreateStepRequest
func (_e *StorageInterface_Expecter) CreateSteps(ctx interface{}, tx interface{}, sequenceID interface{}, steps interface{}) *StorageInterface_CreateSteps_Call {
	return &StorageInterface_CreateSteps_Call{Call: _e.mock.On("CreateSteps", ctx, tx, sequenceID, steps)}
}

func (_c *StorageInterface_CreateSteps_Call) Run(run func(ctx context.Context, tx *sql.Tx, sequenceID int, steps []types.CreateStepRequest)) *StorageInterface_CreateSteps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(int), args[3].([]types.CreateStepRequest))
	})
	return _c
}

func (_c *StorageInterface_CreateSteps_Call) Return(_a0 error) *StorageInterface_CreateSteps_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageInterface_CreateSteps_Call) RunAndReturn(run func(context.Context, *sql.Tx, int, []types.CreateStepRequest) error) *StorageInterface_CreateSteps_Call {
	_c.Call.Return(run)
	return _c
}

// GetSequenceByID provides a mock function with given fields: ctx, db, id
func (_m *StorageInterface) GetSequenceByID(ctx context.Context, db *sqlx.DB, id int) (*types.Sequence, error) {
	ret := _m.Called(ctx, db, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSequenceByID")
	}

	var r0 *types.Sequence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, int) (*types.Sequence, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, int) *types.Sequence); ok {
		r0 = rf(ctx, db, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Sequence)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, int) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageInterface_GetSequenceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequenceByID'
type StorageInterface_GetSequenceByID_Call struct {
	*mock.Call
}

// GetSequenceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db *sqlx.DB
//   - id int
func (_e *StorageInterface_Expecter) GetSequenceByID(ctx interface{}, db interface{}, id interface{}) *StorageInterface_GetSequenceByID_Call {
	return &StorageInterface_GetSequenceByID_Call{Call: _e.mock.On("GetSequenceByID", ctx, db, id)}
}

func (_c *StorageInterface_GetSequenceByID_Call) Run(run func(ctx context.Context, db *sqlx.DB, id int)) *StorageInterface_GetSequenceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.DB), args[2].(int))
	})
	return _c
}

func (_c *StorageInterface_GetSequenceByID_Call) Return(_a0 *types.Sequence, _a1 error) *StorageInterface_GetSequenceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageInterface_GetSequenceByID_Call) RunAndReturn(run func(context.Context, *sqlx.DB, int) (*types.Sequence, error)) *StorageInterface_GetSequenceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStepByID provides a mock function with given fields: ctx, db, stepID
func (_m *StorageInterface) GetStepByID(ctx context.Context, db *sqlx.DB, stepID int) (*types.SequenceStep, error) {
	ret := _m.Called(ctx, db, stepID)

	if len(ret) == 0 {
		panic("no return value specified for GetStepByID")
	}

	var r0 *types.SequenceStep
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, int) (*types.SequenceStep, error)); ok {
		return rf(ctx, db, stepID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, int) *types.SequenceStep); ok {
		r0 = rf(ctx, db, stepID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SequenceStep)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, int) error); ok {
		r1 = rf(ctx, db, stepID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageInterface_GetStepByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStepByID'
type StorageInterface_GetStepByID_Call struct {
	*mock.Call
}

// GetStepByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db *sqlx.DB
//   - stepID int
func (_e *StorageInterface_Expecter) GetStepByID(ctx interface{}, db interface{}, stepID interface{}) *StorageInterface_GetStepByID_Call {
	return &StorageInterface_GetStepByID_Call{Call: _e.mock.On("GetStepByID", ctx, db, stepID)}
}

func (_c *StorageInterface_GetStepByID_Call) Run(run func(ctx context.Context, db *sqlx.DB, stepID int)) *StorageInterface_GetStepByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.DB), args[2].(int))
	})
	return _c
}

func (_c *StorageInterface_GetStepByID_Call) Return(_a0 *types.SequenceStep, _a1 error) *StorageInterface_GetStepByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageInterface_GetStepByID_Call) RunAndReturn(run func(context.Context, *sqlx.DB, int) (*types.SequenceStep, error)) *StorageInterface_GetStepByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStepsBySequenceID provides a mock function with given fields: ctx, db, sequenceID
func (_m *StorageInterface) GetStepsBySequenceID(ctx context.Context, db *sqlx.DB, sequenceID int) ([]types.SequenceStep, error) {
	ret := _m.Called(ctx, db, sequenceID)

	if len(ret) == 0 {
		panic("no return value specified for GetStepsBySequenceID")
	}

	var r0 []types.SequenceStep
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, int) ([]types.SequenceStep, error)); ok {
		return rf(ctx, db, sequenceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, int) []types.SequenceStep); ok {
		r0 = rf(ctx, db, sequenceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.SequenceStep)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.DB, int) error); ok {
		r1 = rf(ctx, db, sequenceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageInterface_GetStepsBySequenceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStepsBySequenceID'
type StorageInterface_GetStepsBySequenceID_Call struct {
	*mock.Call
}

// GetStepsBySequenceID is a helper method to define mock.On call
//   - ctx context.Context
//   - db *sqlx.DB
//   - sequenceID int
func (_e *StorageInterface_Expecter) GetStepsBySequenceID(ctx interface{}, db interface{}, sequenceID interface{}) *StorageInterface_GetStepsBySequenceID_Call {
	return &StorageInterface_GetStepsBySequenceID_Call{Call: _e.mock.On("GetStepsBySequenceID", ctx, db, sequenceID)}
}

func (_c *StorageInterface_GetStepsBySequenceID_Call) Run(run func(ctx context.Context, db *sqlx.DB, sequenceID int)) *StorageInterface_GetStepsBySequenceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.DB), args[2].(int))
	})
	return _c
}

func (_c *StorageInterface_GetStepsBySequenceID_Call) Return(_a0 []types.SequenceStep, _a1 error) *StorageInterface_GetStepsBySequenceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageInterface_GetStepsBySequenceID_Call) RunAndReturn(run func(context.Context, *sqlx.DB, int) ([]types.SequenceStep, error)) *StorageInterface_GetStepsBySequenceID_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteStepByID provides a mock function with given fields: ctx, db, stepID
func (_m *StorageInterface) SoftDeleteStepByID(ctx context.Context, db *sqlx.DB, stepID int) error {
	ret := _m.Called(ctx, db, stepID)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteStepByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, int) error); ok {
		r0 = rf(ctx, db, stepID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageInterface_SoftDeleteStepByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteStepByID'
type StorageInterface_SoftDeleteStepByID_Call struct {
	*mock.Call
}

// SoftDeleteStepByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db *sqlx.DB
//   - stepID int
func (_e *StorageInterface_Expecter) SoftDeleteStepByID(ctx interface{}, db interface{}, stepID interface{}) *StorageInterface_SoftDeleteStepByID_Call {
	return &StorageInterface_SoftDeleteStepByID_Call{Call: _e.mock.On("SoftDeleteStepByID", ctx, db, stepID)}
}

func (_c *StorageInterface_SoftDeleteStepByID_Call) Run(run func(ctx context.Context, db *sqlx.DB, stepID int)) *StorageInterface_SoftDeleteStepByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.DB), args[2].(int))
	})
	return _c
}

func (_c *StorageInterface_SoftDeleteStepByID_Call) Return(_a0 error) *StorageInterface_SoftDeleteStepByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageInterface_SoftDeleteStepByID_Call) RunAndReturn(run func(context.Context, *sqlx.DB, int) error) *StorageInterface_SoftDeleteStepByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSequenceTracking provides a mock function with given fields: ctx, db, sequenceID, openTracking, clickTracking
func (_m *StorageInterface) UpdateSequenceTracking(ctx context.Context, db *sqlx.DB, sequenceID int, openTracking *bool, clickTracking *bool) error {
	ret := _m.Called(ctx, db, sequenceID, openTracking, clickTracking)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSequenceTracking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, int, *bool, *bool) error); ok {
		r0 = rf(ctx, db, sequenceID, openTracking, clickTracking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageInterface_UpdateSequenceTracking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSequenceTracking'
type StorageInterface_UpdateSequenceTracking_Call struct {
	*mock.Call
}

// UpdateSequenceTracking is a helper method to define mock.On call
//   - ctx context.Context
//   - db *sqlx.DB
//   - sequenceID int
//   - openTracking *bool
//   - clickTracking *bool
func (_e *StorageInterface_Expecter) UpdateSequenceTracking(ctx interface{}, db interface{}, sequenceID interface{}, openTracking interface{}, clickTracking interface{}) *StorageInterface_UpdateSequenceTracking_Call {
	return &StorageInterface_UpdateSequenceTracking_Call{Call: _e.mock.On("UpdateSequenceTracking", ctx, db, sequenceID, openTracking, clickTracking)}
}

func (_c *StorageInterface_UpdateSequenceTracking_Call) Run(run func(ctx context.Context, db *sqlx.DB, sequenceID int, openTracking *bool, clickTracking *bool)) *StorageInterface_UpdateSequenceTracking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.DB), args[2].(int), args[3].(*bool), args[4].(*bool))
	})
	return _c
}

func (_c *StorageInterface_UpdateSequenceTracking_Call) Return(_a0 error) *StorageInterface_UpdateSequenceTracking_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageInterface_UpdateSequenceTracking_Call) RunAndReturn(run func(context.Context, *sqlx.DB, int, *bool, *bool) error) *StorageInterface_UpdateSequenceTracking_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStepByID provides a mock function with given fields: ctx, db, stepID, name, content
func (_m *StorageInterface) UpdateStepByID(ctx context.Context, db *sqlx.DB, stepID int, name *string, content *string) error {
	ret := _m.Called(ctx, db, stepID, name, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStepByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.DB, int, *string, *string) error); ok {
		r0 = rf(ctx, db, stepID, name, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorageInterface_UpdateStepByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStepByID'
type StorageInterface_UpdateStepByID_Call struct {
	*mock.Call
}

// UpdateStepByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db *sqlx.DB
//   - stepID int
//   - name *string
//   - content *string
func (_e *StorageInterface_Expecter) UpdateStepByID(ctx interface{}, db interface{}, stepID interface{}, name interface{}, content interface{}) *StorageInterface_UpdateStepByID_Call {
	return &StorageInterface_UpdateStepByID_Call{Call: _e.mock.On("UpdateStepByID", ctx, db, stepID, name, content)}
}

func (_c *StorageInterface_UpdateStepByID_Call) Run(run func(ctx context.Context, db *sqlx.DB, stepID int, name *string, content *string)) *StorageInterface_UpdateStepByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.DB), args[2].(int), args[3].(*string), args[4].(*string))
	})
	return _c
}

func (_c *StorageInterface_UpdateStepByID_Call) Return(_a0 error) *StorageInterface_UpdateStepByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageInterface_UpdateStepByID_Call) RunAndReturn(run func(context.Context, *sqlx.DB, int, *string, *string) error) *StorageInterface_UpdateStepByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageInterface creates a new instance of StorageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageInterface {
	mock := &StorageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
